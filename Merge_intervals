//Question: https://leetcode.com/problems/merge-intervals/
//Solution: https://takeuforward.org/data-structure/merge-overlapping-sub-intervals/

//Brute-force solution- O(NlogN)+O(2N)
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
       vector<vector<int>> ans;
        sort(intervals.begin(),intervals.end());
        for(int i = 0;i<intervals.size();i++)
        {
            int start = intervals[i][0];
            int end = intervals[i][1];

            if(!ans.empty() && end <= ans.back()[1])
            continue;

            for(int j= i+1;j<intervals.size();j++)
            {
                if(intervals[j][0]<=end)
                {
                    end = max(end,intervals[j][1]);
                }
                else
                break;
            }
            ans.push_back({start,end});

        }
        return ans;
    }
};

//Optimized solution- O(NlogN)+O(N)

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
       vector<vector<int>> ans;
        sort(intervals.begin(),intervals.end());
        
        for(int i = 0;i<intervals.size();i++)
        {
            int start = intervals[i][0];
            int end = intervals[i][1];

            if(ans.empty() || start>ans.back()[1])
            ans.push_back({start,end});
            else
            {
               end = max(end,ans.back()[1]);
               ans.back()[1] = end;
            }
            
        }
        return ans;
    }
};

