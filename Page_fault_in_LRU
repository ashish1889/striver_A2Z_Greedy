//Question: https://www.geeksforgeeks.org/problems/page-faults-in-lru5603/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=page-faults-in-lru
//YT video: https://www.youtube.com/watch?v=U8K1cpdMN4I&t=1025s

// Mine code

class Solution{
public:
    int pageFaults(int N, int C, int pages[]){
        // code here
        vector<int> tmp;
        int pageFaults = 0;
       // int n = sizeof(pages)/sizeof(*pages);
       // cout<<"n: "<<n<<endl;
        for(int i = 0;i< N;i++)
        {
            if(tmp.size()<C)
            { auto it = std::find(tmp.begin(), tmp.end(), pages[i]);
               if (it != tmp.end()) { 
                 tmp.erase(it); 
                 tmp.push_back(pages[i]);
                 }
                 else
                 {
                 pageFaults++;
                 tmp.push_back(pages[i]);
                 }
            }
            else
            {
                // Remove the element using erase function and iterators 
                  auto it = std::find(tmp.begin(), tmp.end(), pages[i]); 
  
                // If element is found found, erase it 
                if (it != tmp.end()) { 
                 tmp.erase(it); 
                 tmp.push_back(pages[i]);
                 }
                 else
                 {
                     tmp.erase(tmp.begin());
                     tmp.push_back(pages[i]);
                     pageFaults++;
                 }
            }
                
            }
            return pageFaults;
        
    }
};

// <<<<<<<<<<<<<<<<<<<<<<<<<<===========================================Second Approach as per video===============================================>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

// { Driver Code Starts
// Initial Template for C++



#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

class Solution{
public:
    int pageFaults(int n, int c, int pages[]){
         
        unordered_set<int> s;//memory
        unordered_map<int,int> mp;//store the index values of the elemnts
        
        int pgfault=0;
        
        for(int i=0;i<n;++i)
        {
            if(s.size()<c)
              {
                  if(s.find(pages[i])==s.end())
                    {
                        pgfault++;
                        s.insert(pages[i]);
                    }
                    
                   mp[pages[i]]=i;    
              }
              
            else
             {
                 //lru algorithm
                  if(s.find(pages[i])==s.end())
                    {
                        pgfault++;
                        
                        int lru=INT_MAX;
                        int value=0;
                        for(auto it=s.begin();it!=s.end();++it)
                         {
                             if(mp[*it]<lru)
                               {
                                   lru=mp[*it];
                                   value=*it;
                               }
                         }
                         
                        s.erase(value);
                        s.insert(pages[i]);
                        mp[pages[i]]=i;
                    }
                    
                  mp[pages[i]]=i;    
             }
        }
        
        return pgfault;
      
    }
};

// { Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N, C;
        cin>>N;
        int pages[N];
        for(int i = 0;i < N;i++)
            cin>>pages[i];
        cin>>C;
        
        Solution ob;
        cout<<ob.pageFaults(N, C, pages)<<"\n";
    }
    return 0;
}  // } Driver Code Ends
